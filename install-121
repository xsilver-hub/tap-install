//https证书  参考harbor文档  https://goharbor.io/docs/2.5.0/install-config/configure-https/

//Generate a Certificate Authority Certificate
openssl genrsa -out ca.key 4096
openssl req -x509 -new -nodes -sha512 -days 3650 \
 -subj "/C=CN/ST=Shanghai/L=Shanghai/O=example/OU=Personal/CN=harbor.labs.io" \
 -key ca.key \
 -out ca.crt

//Generate a Server Certificate

openssl genrsa -out harbor.labs.io.key 4096
openssl req -sha512 -new \
    -subj "/C=CN/ST=Shanghai/L=Shanghai/O=example/OU=Personal/CN=harbor.labs.io" \
    -key harbor.labs.io.key \
    -out harbor.labs.io.csr

cat > v3.ext <<-EOF
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1=harbor.labs.io
DNS.2=labs.io
DNS.3=harbor
EOF

openssl x509 -req -sha512 -days 3650 \
    -extfile v3.ext \
    -CA ca.crt -CAkey ca.key -CAcreateserial \
    -in harbor.labs.io.csr \
    -out harbor.labs.io.crt

openssl x509 -inform PEM -in harbor.labs.io.crt -out harbor.labs.io.cert



env.sh
export INSTALL_REGISTRY_USERNAME=admin
export INSTALL_REGISTRY_PASSWORD=Harbor12345
export INSTALL_REGISTRY_HOSTNAME=harbor.labs.io
export TAP_VERSION=1.2.1
export INSTALL_REPO=tap-install
export REGISTRY_CA_PATH=/etc/docker/certs.d/harbor.labs.io/ca.crt
# ess 1.3
#export INSTALL_BUNDLE=harbor.labs.io/tap-install/cluster-essentials-bundle@sha256:54bf611711923dccd7c7f10603c846782b90644d48f1cb570b43a082d18e23b9

# ess 1.2
export INSTALL_BUNDLE=harbor.labs.io/tap-install/cluster-essentials-bundle@sha256:e00f33b92d418f49b1af79f42cb13d6765f1c8c731f4528dfff8343af042dc3e
export DEVELOPER_NAMESPACE=developer-ns

source env.sh

kubectl create clusterrolebinding default-tkg-admin-privileged-binding --clusterrole=psp:vmware-system-privileged --group=system:authenticated

kubectl delete ns tap-install
kubectl delete ns developer-ns
kubectl delete ns metadata-store-secrets
kubectl create ns tap-install
kubectl create ns developer-ns
kubectl create ns metadata-store-secrets


tanzu secret registry add tap-registry \
  --username ${INSTALL_REGISTRY_USERNAME} --password ${INSTALL_REGISTRY_PASSWORD} \
  --server ${INSTALL_REGISTRY_HOSTNAME} \
  --export-to-all-namespaces --yes --namespace tap-install

tanzu package repository add tanzu-tap-repository \
  --url ${INSTALL_REGISTRY_HOSTNAME}/${INSTALL_REPO}/tap-packages:$TAP_VERSION \
  --namespace tap-install

tanzu package repository get tanzu-tap-repository --namespace tap-install

tanzu package install tap -p tap.tanzu.vmware.com -v 1.2.1 --values-file tap-values-multi-cluster-tap-full.yml -n tap-install

tanzu package installed list -A

// 安装dep
tanzu package available list buildservice.tanzu.vmware.com --namespace tap-install

tanzu package repository add tbs-full-deps-repository  --url harbor.labs.io/tap-install/tbs-full-deps:1.6.1 --namespace tap-install

tanzu package install full-tbs-deps -p full-tbs-deps.tanzu.vmware.com -v 1.6.1 -n tap-install

tanzu package installed list -A

kubectl get clusterbuilder.kpack.io
diff ../yml/tap-gui-viewer-service-account-rbac.yml tap-gui-viewer-service-account-rbac.yml

cat <<EOF >  tap-gui-viewer-service-account-rbac.yml
apiVersion: v1
kind: Namespace
metadata:
  name: tap-gui
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: tap-gui
  name: tap-gui-viewer
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tap-gui-read-k8s
subjects:
- kind: ServiceAccount
  namespace: tap-gui
  name: tap-gui-viewer
roleRef:
  kind: ClusterRole
  name: k8s-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-reader
rules:
- apiGroups: ['']
  resources: ['pods', 'pods/log', 'services', 'configmaps']
  verbs: ['get', 'watch', 'list']
- apiGroups: ['apps']
  resources: ['deployments', 'replicasets']
  verbs: ['get', 'watch', 'list']
- apiGroups: ['autoscaling']
  resources: ['horizontalpodautoscalers']
  verbs: ['get', 'watch', 'list']
- apiGroups: ['networking.k8s.io']
  resources: ['ingresses']
  verbs: ['get', 'watch', 'list']
- apiGroups: ['networking.internal.knative.dev']
  resources: ['serverlessservices']
  verbs: ['get', 'watch', 'list']
- apiGroups: [ 'autoscaling.internal.knative.dev' ]
  resources: [ 'podautoscalers' ]
  verbs: [ 'get', 'watch', 'list' ]
- apiGroups: ['serving.knative.dev']
  resources:
  - configurations
  - revisions
  - routes
  - services
  verbs: ['get', 'watch', 'list']
- apiGroups: ['carto.run']
  resources:
  - clusterconfigtemplates
  - clusterdeliveries
  - clusterdeploymenttemplates
  - clusterimagetemplates
  - clusterruntemplates
  - clustersourcetemplates
  - clustersupplychains
  - clustertemplates
  - deliverables
  - runnables
  - workloads
  verbs: ['get', 'watch', 'list']
- apiGroups: ['source.toolkit.fluxcd.io']
  resources:
  - gitrepositories
  verbs: ['get', 'watch', 'list']
- apiGroups: ['conventions.apps.tanzu.vmware.com']
  resources:
  - podintents
  verbs: ['get', 'watch', 'list']
- apiGroups: ['kpack.io']
  resources:
  - images
  - builds
  verbs: ['get', 'watch', 'list']
- apiGroups: ['scanning.apps.tanzu.vmware.com']
  resources:
  - sourcescans
  - imagescans
  verbs: ['get', 'watch', 'list']
- apiGroups: ['tekton.dev']
  resources:
  - taskruns
  - pipelineruns
  verbs: ['get', 'watch', 'list']
- apiGroups: ['kappctrl.k14s.io']
  resources:
  - apps
  verbs: ['get', 'watch', 'list']
EOF

kubectl apply -f tap-gui-viewer-service-account-rbac.yml

CLUSTER_URL=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
CLUSTER_TOKEN=$(kubectl -n tap-gui get secret $(kubectl -n tap-gui get sa tap-gui-viewer -o=json \
| jq -r '.secrets[0].name') -o=json \
| jq -r '.data["token"]' \
| base64 --decode)
# Print out each cluster's details for manual copy and paste
echo $cluster "cluster URL:" $CLUSTER_URL
echo $cluster "cluster token:" $CLUSTER_TOKEN



CA_CERT=$(kubectl get secret -n metadata-store ingress-cert -o json | jq -r ".data.\"ca.crt\"")
AUTH_TOKEN=$(kubectl get secrets -n metadata-store -o jsonpath="{.items[?(@.metadata.annotations['kubernetes\.io/service-account\.name']=='metadata-store-read-write-client')].data.token}" | base64 -d)


cat <<EOF >  store_ca.yaml
---
apiVersion: v1
kind: Secret
type: kubernetes.io/tls
metadata:
  name: store-ca-cert
  namespace: metadata-store-secrets
data:
  ca.crt: $CA_CERT
  tls.crt: ""
  tls.key: ""
EOF

kubectl apply -f store_ca.yaml


kubectl get secret -n metadata-store-secrets
kubectl delete secret  store-auth-token -n metadata-store-secrets
kubectl create secret generic store-auth-token --from-literal=auth_token=$AUTH_TOKEN -n metadata-store-secrets

cat <<EOF > store_secrets_export.yaml
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretExport
metadata:
  name: store-ca-cert
  namespace: metadata-store-secrets
spec:
  toNamespace: scan-link-system
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretExport
metadata:
  name: store-auth-token
  namespace: metadata-store-secrets
spec:
  toNamespace: scan-link-system
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretExport
metadata:
  name: store-auth-token
  namespace: metadata-store-secrets
spec:
  toNamespace: developer-ns
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretExport
metadata:
  name: store-ca-cert
  namespace: metadata-store-secrets
spec:
  toNamespace: developer-ns
EOF

kubectl apply -f store_secrets_export.yaml

export WORKLOAD_REGISTRY_HOSTNAME=ccr.ccs.tencentyun.com
export WORKLOAD_REGISTRY_USERNAME=100027819633
export WORKLOAD_REGISTRY_PASSWORD=Ecdata2022
export DEVELOPER_NAMESPACE=developer-ns

export WORKLOAD_REGISTRY_HOSTNAME=harbor.labs.io
export WORKLOAD_REGISTRY_USERNAME=admin
export WORKLOAD_REGISTRY_PASSWORD=Harbor12345
export DEVELOPER_NAMESPACE=developer-ns

tanzu secret registry add registry-credentials  -y --server $WORKLOAD_REGISTRY_HOSTNAME --username $WORKLOAD_REGISTRY_USERNAME --password $WORKLOAD_REGISTRY_PASSWORD --namespace $DEVELOPER_NAMESPACE

cat <<EOF | kubectl -n developer-ns apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: tap-registry
  annotations:
    secretgen.carvel.dev/image-pull-secret: ""
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: e30K
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
secrets:
  - name: registry-credentials
imagePullSecrets:
  - name: registry-credentials
  - name: tap-registry
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-permit-deliverable
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: deliverable
subjects:
  - kind: ServiceAccount
    name: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-permit-workload
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: workload
subjects:
  - kind: ServiceAccount
    name: default
EOF

cat <<EOF > github-secret-https.yaml
apiVersion: v1
kind: Secret
metadata:
  name: git-https
  namespace: developer-ns
  annotations:
    tekton.dev/git-0: http://gitlab.labs.io:3000
type: kubernetes.io/basic-auth
stringData:
  username: xsilver
  password: Zhigang1978
EOF

kubectl apply -f github-secret-https.yaml

cat <<EOF > metadata-rw-client.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: metadata-store-read-write
  namespace: metadata-store
rules:
- resources: ["all"]
  verbs: ["get", "create", "update"]
  apiGroups: [ "metadata-store/v1" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: metadata-store-read-write
  namespace: metadata-store
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: metadata-store-read-write
subjects:
- kind: ServiceAccount
  name: metadata-store-read-write-client
  namespace: metadata-store
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: metadata-store-read-write-client
  namespace: metadata-store
automountServiceAccountToken: false
EOF

 kubectl apply -f metadata-rw-client.yaml

kubectl get secret $(kubectl get sa -n metadata-store metadata-store-read-write-client -o json | jq -r '.secrets[0].name') -n metadata-store -o json | jq -r '.data.token' | base64 -d

更新到value.yaml文件中

cat <<EOF > snyk-secret.yaml
---
apiVersion: v1
data:
  snyk_token: MGM0MjRmYjQtYWZlNC00ZmEyLTg2ZjktYTVkNjcyZWEyMjVlCg==
kind: Secret
metadata:
  name: snyk-api-token
  namespace: developer-ns
type: Opaque
EOF

kubectl apply -f  snyk-secret.yaml 

cat <<EOF > snyk-values.yaml
---
namespace: developer-ns
targetImagePullSecret: tap-registry
snyk:
  tokenSecret:
    name: snyk-api-token
metadataStore:
  url: https://metadata-store.tap-mc.labs.io
  caSecret:
    name: store-ca-cert
    importFromNamespace: "" #! since both snyk and grype both enable store, one must leave importFromNamespace blank
  authSecret:
    name: store-auth-token
    importFromNamespace: "" #! since both snyk and grype both enable store, one must leave importFromNamespace blank
EOF


kubectl create configmap harbor-ca-cert --from-file=/etc/docker/certs.d/harbor.labs.io/ca.crt -n developer-ns
kubectl create configmap apache-ca-cert --from-file=/data/tap/tls/ssl/ca.crt -n developer-ns

cat <<EOF > grype-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: grype-airgap-overlay
  namespace: tap-install #! namespace where tap is installed
stringData:
  patch.yaml: |
    #@ load("@ytt:overlay", "overlay")
    #@overlay/match by=overlay.subset({"kind":"ScanTemplate"}),expects="1+"
    ---
    spec:
      template:
        initContainers:
          #@overlay/match by=overlay.subset({"name": "scan-plugin"}), expects="1+"
          - name: scan-plugin
            #@overlay/match missing_ok=True
            env:
              #@overlay/append
              - name: GRYPE_CHECK_FOR_APP_UPDATE
                value: "false"
              - name: GRYPE_DB_AUTO_UPDATE
                value: "true"
              - name: GRYPE_DB_UPDATE_URL
                value: "https://harbor.labs.io:9443/listing.json" #! url points to the internal file server
              - name: GRYPE_DB_CA_CERT
                value: "/etc/ssl/certs/apache-ca-cert.crt"
              - name: GRYPE_DB_MAX_ALLOWED_BUILT_AGE
                value: "24000h"
            volumeMounts:
              #@overlay/append
              - name: harbor-ca-cert
                mountPath: /etc/ssl/certs/harbor-ca-cert.crt
                subPath: ca.crt #! key pointing to ca certificate
              - name: apache-ca-cert
                mountPath: /etc/ssl/certs/apache-ca-cert.crt
                subPath: ca.crt #! key pointing to ca certificate
        volumes:
        #@overlay/append
        - name: harbor-ca-cert
          configMap:
            name: harbor-ca-cert #! name of the configmap created
        - name: apache-ca-cert
          configMap:
            name: apache-ca-cert #! name of the configmap created
EOF

kubectl apply -f  grype-secret.yaml 


tanzu package available list snyk.scanning.apps.tanzu.vmware.com --namespace tap-install
拿到snyk 版本号
tanzu package install snyk-scanner \
  --package-name snyk.scanning.apps.tanzu.vmware.com \
  --version 1.0.0-beta.2 \
  --namespace tap-install \
  --values-file snyk-values.yaml

cat <<EOF > scan-policy.yaml
---
apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
kind: ScanPolicy
metadata:
  name: scan-policy
  namespace: developer-ns
spec:
  regoFile: |
    package main

    # Accepted Values: "Critical", "High", "Medium", "Low", "Negligible", "UnknownSeverity"
    notAllowedSeverities := ["Critical","UnknownSeverity"]
    ignoreCves := []

    contains(array, elem) = true {
      array[_] = elem
    } else = false { true }

    isSafe(match) {
      fails := contains(notAllowedSeverities, match.ratings.rating[_])
      not fails
    }

    isSafe(match) {
      ignore := contains(ignoreCves, match.Id)
      ignore
    }

    deny[msg] {
      comp := input.bom.components.component[_]
      vuln := comp.vulnerabilities.vulnerability[_]
      ratings := vuln.ratings.rating[_]
      not isSafe(vuln)
      msg = sprintf("CVE %s %s %s", [comp.name, vuln.id, ratings])
    }
EOF

kubectl apply -f scan-policy.yaml

vi  tekton-pipeline.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: developer-defined-tekton-pipeline
  namespace: developer-ns
  labels:
    apps.tanzu.vmware.com/pipeline: test      # (!) required
spec:
  params:
    - name: source-url                        # (!) required
    - name: source-revision                   # (!) required
  tasks:
    - name: test
      params:
        - name: source-url
          value: $(params.source-url)
        - name: source-revision
          value: $(params.source-revision)
      taskSpec:
        params:
          - name: source-url
          - name: source-revision
        steps:
          - name: test
            image: harbor.labs.io/tap/lib/maven:3.6.3-openjdk-11
            script: |-
              cd `mktemp -d`
              wget -qO- $(params.source-url) | tar xvz -m
              mvn test
保存

kubectl apply -f tekton-pipeline.yaml

kubectl edit sa default -n developer-ns
把git-https加到secret那里

tanzu package installed update tap -p tap.tanzu.vmware.com -v 1.2.1  --values-file tap-values-multi-cluster-tap-full.yml -n tap-install

tanzu package installed list -A


//测试
tanzu apps workload create tanzu-java-web-app --git-repo http://gitlab.labs.io:3000/xsilver/tanzu-java-web-dev  --git-branch main --type web --label app.kubernetes.io/part-of=tanzu-java-web-app --label  apps.tanzu.vmware.com/has-tests=true --yes --namespace developer-ns

tanzu apps workload tail tanzu-java-web-app --namespace developer-ns
tanzu apps workload get tanzu-java-web-app --namespace developer-ns
tanzu apps workload delete tanzu-java-web-app --yes --namespace developer-ns

//删除

tanzu package installed delete tap --yes --namespace tap-install
tanzu package installed delete full-tbs-deps  --yes --namespace tap-install
tanzu package installed delete snyk-scanner  --yes --namespace tap-install

tanzu package repository delete  tanzu-tap-repository  --yes --namespace tap-install
tanzu package repository delete  tbs-full-deps-repository  --yes --namespace tap-install


kubectl delete ns tap-install
kubectl delete ns developer-ns --force --grace-period=0
kubectl delete ns metadata-store-secrets

//ns 删除不掉
kubectl get ns developer-ns  -o json >developer-ns.json

vi  developer-ns.json
修改：
"spec": {
        "finalizers": [
            "kubernetes"
        ]
    },
为：
"spec": {
        "finalizers": [
        ]
    },

kubectl proxy --port=8082
curl -k -H "Content-Type:application/json" -X PUT --data-binary @developer-ns.json http://127.0.0.1:8082/api/v1/namespaces/developer-ns/finalize


tanzu package installed list -A

